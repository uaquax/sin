use std::env;

use teloxide::{
    payloads::SendMessageSetters,
    requests::Requester,
    types::{ChatId, InlineKeyboardButton, InlineKeyboardMarkup, Message},
    Bot,
};
use tokio::sync::Mutex as TokioMutex;

use crate::{
    database::Database, messages::receive_message, models::gender::Gender, state::State,
    user_state::UserState, Dialog, HandlerResult, DATABASE,
};

pub async fn admin_message(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let admin = env::var("ADMIN").unwrap();
    if msg.chat.id.0.to_string() == admin {}

    let db = DATABASE.get_or_init(|| TokioMutex::new(Database::new("db.db").unwrap()));
    let users = db.lock().await.get_all_users().unwrap();

    for user in users {
        let _ = bot
            .send_message(
                ChatId(user.id),
                format!(
                    "--- SinChat ---\n\n{}",
                    msg.text().unwrap().split("/message").nth(1).unwrap()
                ),
            )
            .await;
    }

    Ok(())
}

pub async fn rules(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "–ß—Ç–æ –ó–ê–ü–†–ï–©–ï–ù–ù–û –≤ SinChat\n\nüí¨–û–±—â–∏–µ\n–†–µ–∫–ª–∞–º–∞\n–ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ\n–°–ø–∞–º\n–ù–∞—Ü–∏–∑–º / —Ñ–∞—à–∏–∑–º / —Ä–∞—Å–∏–∑–º\n–ë—É–ª–∏–Ω–≥\n\nüí¨ –û–±—ã—á–Ω–∏–π —á–∞—Ç\n–†–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ —Ç–µ–º—ã 18+ \n–í—ã–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\nüîû –ü–æ—à–ª—ã–π —á–∞—Ç\n–û–±—â–∞—Ç—å—Å—è –Ω–∞ –ù–ï –ø–æ—à–ª—ã–µ —Ç–µ–º—ã\n–ò—Å–∫–∞—Ç—å –¥—Ä—É–∑–µ–π\n\n–ó–∞ –ª—é–±–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –∏–∂–µ 20, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n\n‚ö†Ô∏è–ù–ï –ó–ù–ê–ù–ò–ï –ü–†–ê–í–ò–õ, –ù–ï –£–ë–ò–†–ê–ï–¢ –° –í–ê–° –û–¢–í–ï–¢–°–í–ï–ù–ù–û–°–¢–ò‚ö†Ô∏è")

        .await?;

    Ok(())
}

pub async fn ban(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    if let Some(txt) = msg.text() {
        if txt.split("/ban").nth(1).is_none() {
            bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫"))
                .await?;
            return Ok(());
        }
    }

    let admin = env::var("ADMIN").unwrap();

    if msg.chat.id.0.to_string() == admin {
        let db = Database::new("db.db").unwrap();
        let user = db
            .get_user(
                msg.text()
                    .unwrap()
                    .split("/ban")
                    .nth(1)
                    .unwrap()
                    .trim()
                    .parse::<i64>()
                    .unwrap(),
            )
            .unwrap()
            .unwrap();

        let id = msg
            .text()
            .unwrap_or("/ban")
            .split("/ban")
            .nth(1)
            .unwrap_or("")
            .trim()
            .parse::<i64>()
            .unwrap_or(0);
        if id != 0 {
            db.ban_user(id).unwrap();
            bot.send_message(msg.chat.id, format!("–ì–æ—Ç–æ–≤–æ\n\n{:#?}", user))
                .await?;
        } else {
            bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫"))
                .await?;
        }
    }

    Ok(())
}

pub async fn unban(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    if let Some(txt) = msg.text() {
        if txt.split("/unban").nth(1).is_none() {
            bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫"))
                .await?;
            return Ok(());
        }
    }

    let admin = env::var("ADMIN").unwrap();

    if msg.chat.id.0.to_string() == admin {
        let db = Database::new("db.db").unwrap();
        let user = db
            .get_user(
                msg.text()
                    .unwrap()
                    .split("/unban")
                    .nth(1)
                    .unwrap()
                    .trim()
                    .parse::<i64>()
                    .unwrap(),
            )
            .unwrap()
            .unwrap();

        let id = msg
            .text()
            .unwrap_or("/unban")
            .split("/unban")
            .nth(1)
            .unwrap_or("")
            .trim()
            .parse::<i64>()
            .unwrap_or(0);
        if id != 0 {
            db.unban_user(id).unwrap();
            bot.send_message(msg.chat.id, format!("–ì–æ—Ç–æ–≤–æ\n\n{:#?}", user))
                .await?;
        } else {
            bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫"))
                .await?;
        }
    }

    Ok(())
}

pub async fn user_info(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let admin = env::var("ADMIN").unwrap();

    if msg.chat.id.0.to_string() == admin {
        let db = Database::new("db.db").unwrap();
        let user = db
            .get_user(
                msg.text()
                    .unwrap_or("/userinfo")
                    .split("/userinfo")
                    .nth(1)
                    .unwrap_or("")
                    .trim()
                    .parse::<i64>()
                    .unwrap_or(msg.chat.id.0),
            )
            .unwrap()
            .unwrap();

        bot.send_message(msg.chat.id, format!("{:#?}", user))
            .await?;
    } else {
        let db = Database::new("db.db").unwrap();
        let user = db.get_user(msg.chat.id.0).unwrap().unwrap();

        bot.send_message(
            msg.chat.id,
            format!(
                "{}\n\n–ù–∏–∫–Ω–µ–π–º: {}\n–ü–æ–ª: {}\n–í–æ–∑—Ä–∞—Å—Ç: {}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {}",
                user.id,
                user.nickname,
                if user.gender == Gender::Male {
                    "üçå"
                } else {
                    "üçë"
                },
                user.age,
                user.reputation
            ),
        )
        .await?;
    }

    Ok(())
}

pub async fn admin(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let admin = env::var("ADMIN").unwrap();
    let db = Database::new("db.db").unwrap();
    let total_users = db.get_total_users()?;
    let female_count = db.get_female_count()?;
    let male_count = db.get_male_count()?;
    let total_chats = db.get_total_chats()?;
    let total_queue = db.get_queue_count()?;
    let total_male_queue = db.get_male_queue_count()?;
    let total_female_queue = db.get_female_queue_count()?;

    if msg.chat.id.0.to_string() == admin {
        bot.send_message(
            msg.chat.id,
            format!(
                "Users: {}\nüçå Males: {}\nüçë Females: {}\n\nüí¨ Chats: {}\n\nQueue: {}\n\n\nüçå Queue Males: {}\nüçë Queue Females: {}",
                total_users, male_count, female_count, total_chats, total_queue, total_male_queue, total_female_queue
            ),
        )
        .await?;
    }

    Ok(())
}

pub async fn stop(bot: Bot, dialog: Dialog, msg: Message) -> HandlerResult {
    let db = DATABASE
        .get_or_init(|| TokioMutex::new(Database::new("db.db").unwrap()))
        .lock()
        .await;

    let intr = db.delete_chat(dialog.chat_id().0);
    dialog.update(State::Idle).await?;

    if intr.is_ok() {
        let intr = intr.unwrap();

        if intr.is_some() {
            let intr = intr.unwrap();

            db.set_user_state(msg.chat.id.0, UserState::Idle).unwrap();
            db.set_user_state(intr, UserState::Idle).unwrap();

            let reactions = [
                InlineKeyboardButton::callback("üëç", format!("like_{}", intr)),
                InlineKeyboardButton::callback("üëé", format!("dislike_{}", intr)),
            ];
            bot.send_message(
                dialog.chat_id(),
                "–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n/search - –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
            )
            .reply_markup(InlineKeyboardMarkup::new([reactions]))
            .await?;

            let reactions = [
                InlineKeyboardButton::callback("üëç", format!("like_{}", msg.chat.id)),
                InlineKeyboardButton::callback("üëé", format!("dislike_{}", msg.chat.id)),
            ];
            bot.send_message(ChatId(intr), "–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∏–∞–ª–æ–≥!!")
                .reply_markup(InlineKeyboardMarkup::new([reactions]))
                .await?;
        } else {
            bot.send_message(msg.chat.id, "–¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ!")
                .await?;
        }
    } else {
        bot.send_message(msg.chat.id, "–¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ!")
            .await?;
    }
    dialog.update(State::Idle).await?;

    Ok(())
}

pub async fn cancel(bot: Bot, dialog: Dialog, msg: Message) -> HandlerResult {
    let db = DATABASE
        .get_or_init(|| TokioMutex::new(Database::new("db.db").unwrap()))
        .lock()
        .await;
    db.dequeue_user(msg.chat.id.0).unwrap();
    bot.send_message(msg.chat.id, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω!").await?;
    dialog.update(State::Idle).await?;
    db.set_user_state(msg.chat.id.0, UserState::Idle).unwrap();

    Ok(())
}

pub async fn idle(bot: Bot, dialog: Dialog, msg: Message) -> HandlerResult {
    if let Some(txt) = msg.text() {
        if txt.contains("search") {
            let db = DATABASE
                .get_or_init(|| TokioMutex::new(Database::new("db.db").unwrap()))
                .lock()
                .await;

            let user = db.get_user(dialog.chat_id().0);

            if user.is_ok() && user.as_ref().unwrap().is_some() {
                let user = user.unwrap().unwrap();
                if user.state == UserState::Dialog {
                    bot.send_message(dialog.chat_id(), "–¢—ã –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É! –û—Å—Ç–∞–Ω–æ–≤–∏ –¥–∏–∞–ª–æ–≥")
                        .await?;

                    return Ok(());
                } else if user.state == UserState::Search {
                    bot.send_message(dialog.chat_id(), "–ù–µ –º–µ—à–∞–π! –Ø –∏—â—É")
                        .await?;

                    return Ok(());
                }
            } else {
                bot.send_message(
                    dialog.chat_id(),
                    "–¢—ã –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É! –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Å—è!\n\n/start",
                )
                .await?;

                return Ok(());
            }

            let genders =
                ["üçå", "üçë"].map(|product| InlineKeyboardButton::callback(product, product));
            bot.send_message(dialog.chat_id(), "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
                .reply_markup(InlineKeyboardMarkup::new([genders]))
                .await
                .unwrap();
            dialog.update(State::SearchChooseGender).await.unwrap();
        } else {
            receive_message(bot, dialog, msg).await?;
        }
    } else {
        receive_message(bot, dialog, msg).await?;
    }

    Ok(())
}
